{"version":3,"sources":["types/TypesColor.ts","api.ts","static/icons/down-arrow-grey.svg","static/icons/up-arrow-grey.svg","components/Dropdown/Dropdown.tsx","types/Information.ts","components/PokemonCard/PokemonCard.tsx","components/CardInformation/CardInformation.tsx","App.tsx","index.tsx"],"names":["TypesColor","getTypes","a","axios","get","response","data","results","map","type","name","getPokemonList","page","limit","Array","isArray","pokemonDataPromises","result","url","then","res","Promise","all","Error","getPokemonByType","pokemon","checkPokemonArrayType","length","Dropdown","options","value","onChange","filterByType","onTypeChange","useState","selectedOption","setSelectedOption","useEffect","undefined","updatedOptions","label","className","selectedValue","open","Button","cn","find","opt","src","iconUp","alt","iconDown","show","enter","enterFrom","enterTo","leave","leaveFrom","leaveTo","Options","optionValue","Option","active","Information","PokemonCard","onClick","role","tabIndex","onKeyPress","e","key","sprites","front_default","charAt","toUpperCase","slice","types","pokemons","style","backgroundColor","convertToEnum","specialAttack","specialDefense","CardInformation","selectedPokemon","join","stats","Fragment","stat","base_stat","weight","moves","App","setPokemon","setSelectedPokemon","setPage","isLoading","setIsLoading","errorMsg","setErrorMsg","pokemonTypes","setPokemonTypes","selectedType","setSelectedType","handleTypeChange","pokemonByType","newPokemonData","filteredPokemon","filter","some","p","loadPokemon","hasPokemonArray","typesWithPokemonArray","filteredTypes","prevPokemon","handleCardClick","selected","id","prevPage","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9e18db49.chunk.js","sourcesContent":["// eslint-disable-next-line no-shadow\nexport enum TypesColor {\n  normal = '#f8f6e7',\n  fighting = '#ce8a8a',\n  flying = '#b4dde4',\n  poison = '#c45ae4',\n  ground = '#a08c80',\n  rock = '#858280',\n  bug = '#93a580',\n  ghost = '#babbb9',\n  steel = '#c8cfdd',\n  fire = '#e45a5a',\n  water = '#6680b6',\n  grass = '#9bf78f',\n  electric = '#fce515',\n  psychic = '#d0d888',\n  ice = '#88d8cb',\n  dragon = '#e17eff',\n  dark = '#914ee9',\n  fairy = '#f8bbee',\n}\n","import axios from 'axios';\n\ninterface PokemonResult {\n  url: string;\n}\n\nexport const getTypes = async () => {\n  const response = await axios.get('https://pokeapi.co/api/v2/type/');\n\n  return response.data.results.map((type: { name: string }) => type.name);\n};\n\nexport const getPokemonList = async (page: number, limit: number) => {\n  const response = await axios.get(`https://pokeapi.co/api/v2/pokemon/?offset=${page * limit}&limit=${limit}`);\n\n  if (Array.isArray(response.data.results)) {\n    const pokemonDataPromises = response.data.results.map((result: PokemonResult) => {\n      return axios.get(result.url).then((res) => res.data);\n    });\n\n    return Promise.all(pokemonDataPromises);\n    // eslint-disable-next-line no-else-return\n  } else {\n    throw new Error('Invalid data format received.');\n  }\n};\n\nexport const getPokemonByType = async (type: string) => {\n  try {\n    const response = await axios.get(`https://pokeapi.co/api/v2/type/${type}/`);\n    const pokemonDataPromises = response.data.pokemon.map((pokemon: { pokemon: PokemonResult }) => {\n      return axios.get(pokemon.pokemon.url).then((res) => res.data);\n    });\n\n    return Promise.all(pokemonDataPromises);\n  } catch (error) {\n    throw new Error('Invalid data format received.');\n  }\n};\n\nexport const checkPokemonArrayType = async (type: string) => {\n  try {\n    const response = await axios.get(`https://pokeapi.co/api/v2/type/${type}/`);\n\n    if (response.data.pokemon && Array.isArray(response.data.pokemon) && response.data\n      .pokemon.length > 0) {\n      return true;\n    // eslint-disable-next-line padded-blocks, no-else-return\n    } else {\n      return false;\n    }\n  } catch (error) {\n    throw new Error('Invalid data format received.');\n  }\n};\n","export default __webpack_public_path__ + \"static/media/down-arrow-grey.333d9bff.svg\";","export default __webpack_public_path__ + \"static/media/up-arrow-grey.bd5a2151.svg\";","import React, { useState, useEffect } from 'react';\nimport { Listbox, Transition } from '@headlessui/react';\nimport cn from 'classnames';\nimport iconDown from '../../static/icons/down-arrow-grey.svg';\nimport iconUp from '../../static/icons/up-arrow-grey.svg';\nimport './Dropdown.scss';\n\ninterface Props {\n  options: { label: string; value: string }[];\n  value?: string | null;\n  onChange?: (value: string) => void;\n  filterByType?: boolean;\n  onTypeChange?: (type: string) => void;\n}\n\nexport const Dropdown: React.FC<Props> = ({\n  options,\n  value,\n  onChange,\n  filterByType,\n  onTypeChange,\n}) => {\n  const [selectedOption, setSelectedOption] = useState(value);\n\n  useEffect(() => {\n    if (value !== undefined) {\n      setSelectedOption(value);\n    }\n  }, [value]);\n\n  const handleChange = (selectedValue: string) => {\n    setSelectedOption(selectedValue);\n    if (onChange) {\n      onChange(selectedValue);\n    }\n\n    if (filterByType && onTypeChange) {\n      onTypeChange(selectedValue);\n    }\n  };\n\n  const allOption = { label: 'all', value: null };\n  const updatedOptions = [allOption, ...options];\n\n  return (\n    <div className=\"base-container\">\n      <Listbox\n        value={selectedOption}\n        onChange={handleChange}\n      >\n        {({ open }) => (\n          <>\n            <Listbox.Button\n              className={cn('base-select', { 'base-select-open': open })}\n            >\n              {options.find((opt) => opt.value === selectedOption)?.label\n              || 'Select options'}\n              <span className=\"icon\">\n                {open ? (\n                  <img src={iconUp} alt=\"icon-up\" />\n                ) : (\n                  <img src={iconDown} alt=\"icon-up\" />\n                )}\n              </span>\n            </Listbox.Button>\n\n            {open && (\n              <Transition\n                show={open}\n                enter=\"transition-opacity duration-75\"\n                enterFrom=\"opacity-0\"\n                enterTo=\"opacity-100\"\n                leave=\"transition-opacity duration-150\"\n                leaveFrom=\"opacity-100\"\n                leaveTo=\"opacity-0\"\n              >\n                <Listbox.Options className=\"options\">\n                  {updatedOptions.map(({ label, value: optionValue }) => (\n                    <Listbox.Option\n                      key={optionValue}\n                      value={optionValue}\n                    >\n                      {({ active }) => (\n                        <div\n                          className={cn('list',\n                            { 'base-select-hover': active })}\n                        >\n                          {label}\n                        </div>\n                      )}\n                    </Listbox.Option>\n                  ))}\n                </Listbox.Options>\n              </Transition>\n            )}\n          </>\n        )}\n      </Listbox>\n    </div>\n  );\n};\n","// eslint-disable-next-line no-shadow\nexport enum Information {\n  hp = 'HP',\n  attack = 'Attack',\n  defense = 'Defense',\n  specialAttack = 'SP Attack',\n  specialDefense = 'SP Defense',\n  speed = 'Speed',\n}\n","import React from 'react';\nimport { Pokemon } from '../../types/Pokemon';\nimport { TypesColor } from '../../types/TypesColor';\nimport './PokemonCard.scss';\n\ninterface Props {\n  pokemon: Pokemon;\n  onClick: (selected: Pokemon) => void;\n}\n\nexport const PokemonCard: React.FC<Props> = ({ pokemon, onClick }) => {\n  const getTypeColor = (type: string): string => {\n    return TypesColor[type as keyof typeof TypesColor] || '';\n  };\n\n  return (\n    <div\n      role=\"button\"\n      tabIndex={0}\n      onClick={() => onClick(pokemon)}\n      onKeyPress={(e) => e.key === 'Enter' && onClick(pokemon)}\n    >\n      <article className=\"card\">\n        <img className=\"card__photo\" src={pokemon.sprites.front_default} alt=\"Pokemon\" />\n        <h2 className=\"card__header\">{pokemon.name.charAt(0).toUpperCase() + pokemon.name.slice(1)}</h2>\n        <div className=\"card__block\">\n          {pokemon.types.map((pokemons) => (\n            <div\n              key={pokemons.type.name}\n              className=\"card__title\"\n              style={{ backgroundColor: getTypeColor(pokemons.type.name) }}\n            >\n              <span className=\"card__title_type\">\n                {pokemons.type.name.charAt(0).toUpperCase() + pokemons.type.name.slice(1)}\n              </span>\n            </div>\n\n          ))}\n        </div>\n      </article>\n    </div>\n  );\n};\n","import React from 'react';\nimport { Pokemon } from '../../types/Pokemon';\nimport { Information } from '../../types/Information';\nimport './CardInformation.scss';\n\ninterface Props {\n  selectedPokemon: Pokemon;\n}\n\nconst convertToEnum = (name: string): Information | undefined => {\n  switch (name) {\n    case 'special-attack':\n      return Information.specialAttack;\n    case 'special-defense':\n      return Information.specialDefense;\n    default:\n      return Information[name as keyof typeof Information];\n  }\n};\n\nexport const CardInformation: React.FC<Props> = ({ selectedPokemon }) => {\n  return (\n    <article className=\"container\">\n      <img className=\"container__photo\" src={selectedPokemon.sprites.front_default} alt=\"Pokemon\" />\n      <h2 className=\"container__header\">{selectedPokemon.name.charAt(0).toUpperCase() + selectedPokemon.name.slice(1)}</h2>\n      <div className=\"container__block\">\n        <span className=\"container__title\">Type</span>\n\n        <span className=\"container__title\">\n          {selectedPokemon.types.map((pokemons) => pokemons.type.name).join(' ')}\n        </span>\n\n        {selectedPokemon.stats.map((pokemons) => (\n          <React.Fragment key={pokemons.stat.name}>\n            <span className=\"container__title\">{convertToEnum(pokemons.stat.name)}</span>\n            <span className=\"container__title\">{pokemons.base_stat}</span>\n          </React.Fragment>\n        ))}\n\n        <span className=\"container__title\">Weight</span>\n        <span className=\"container__title\">{selectedPokemon.weight}</span>\n\n        <span className=\"container__title\">Total moves</span>\n        <span className=\"container__title\">{selectedPokemon.moves.length}</span>\n      </div>\n    </article>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport './App.scss';\nimport './styles/reset.scss';\nimport {\n  getTypes, getPokemonList, getPokemonByType, checkPokemonArrayType,\n} from './api';\nimport { Pokemon } from './types/Pokemon';\nimport { Dropdown } from './components/Dropdown/Dropdown';\nimport { PokemonCard } from './components/PokemonCard/PokemonCard';\nimport { CardInformation } from './components/CardInformation/CardInformation';\n\nexport const App: React.FC = () => {\n  const [pokemon, setPokemon] = useState<Pokemon[]>([]);\n  const [selectedPokemon, setSelectedPokemon] = useState<Pokemon | null>(null);\n  const [page, setPage] = useState(0);\n  const [isLoading, setIsLoading] = useState(false);\n  const [errorMsg, setErrorMsg] = useState('');\n  const [pokemonTypes, setPokemonTypes] = useState<string[]>([]);\n  const [selectedType, setSelectedType] = useState<string | null>(null);\n\n  const handleTypeChange = async (type: string | null) => {\n    setSelectedType(type);\n\n    try {\n      setIsLoading(true);\n\n      if (type !== null) {\n        const pokemonByType = await getPokemonByType(type);\n\n        setPokemon(pokemonByType);\n      } else {\n        const newPokemonData = await getPokemonList(page, 12);\n\n        setPokemon(newPokemonData);\n      }\n\n      setErrorMsg('');\n    } catch (error) {\n      setErrorMsg('Error while loading data. Try again later.');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const filteredPokemon = selectedType !== null\n    ? pokemon.filter((pokemons) => pokemons.types.some((p) => p.type.name === selectedType))\n    : pokemon;\n\n  const loadPokemon = async () => {\n    try {\n      const types = await getTypes();\n\n      const typesWithPokemonArray = await Promise.all(\n        types.map(async (type: string) => ({\n          type,\n          hasPokemonArray: await checkPokemonArrayType(type),\n        })),\n      );\n\n      const filteredTypes = typesWithPokemonArray\n        .filter(({ hasPokemonArray }) => hasPokemonArray)\n        .map(({ type }) => type);\n\n      setPokemonTypes(filteredTypes);\n\n      const newPokemonData = await getPokemonList(page, 12);\n\n      setPokemon((prevPokemon) => [...prevPokemon, ...newPokemonData]);\n      setErrorMsg('');\n    } catch (error) {\n      setErrorMsg('Error while loading data. Try again later.');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    loadPokemon();\n  }, [page]);\n\n  const loadMore = () => {\n    setPage((prevPage) => prevPage + 1);\n  };\n\n  const handleCardClick = (selected: Pokemon) => {\n    setSelectedPokemon(selected);\n  };\n\n  return (\n    <>\n      <div className=\"contain\">\n        <header className=\"header\">\n          <h1 className=\"header__title\">Pokedex</h1>\n        </header>\n\n        <div>\n          <Dropdown\n            options={pokemonTypes.map((type) => ({ label: type, value: type }))}\n            value={selectedType}\n            onChange={(type) => handleTypeChange(type)}\n            filterByType\n            onTypeChange={(type) => handleTypeChange(type)}\n          />\n        </div>\n\n        <section className=\"content\">\n          <div>\n            <div className=\"content__container\">\n              {filteredPokemon.length > 0 ? (\n                <>\n                  {filteredPokemon.map((pokemons) => (\n                    <PokemonCard\n                      key={pokemons.id}\n                      pokemon={pokemons}\n                      onClick={handleCardClick}\n                    />\n                  ))}\n\n                  {errorMsg && <p className=\"errorMsg\">{errorMsg}</p>}\n\n                  {filteredPokemon.length > 0 && (\n                    <button\n                      type=\"button\"\n                      className=\"content__button\"\n                      onClick={loadMore}\n                    >\n                      {isLoading ? 'Loading...' : 'Load More'}\n                    </button>\n                  )}\n                </>\n              ) : (\n                <p>Loading...</p>\n              )}\n            </div>\n          </div>\n\n          <div className=\"content__contain\">\n            {selectedPokemon && (\n              <CardInformation selectedPokemon={selectedPokemon} />\n            )}\n          </div>\n        </section>\n      </div>\n    </>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>,\n\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}